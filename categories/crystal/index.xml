<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crystal on Mordsith - Tech Docs</title>
    <link>https://mordsith.github.io/categories/crystal/index.xml</link>
    <description>Recent content in Crystal on Mordsith - Tech Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://mordsith.github.io/categories/crystal/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crystal Tutorial The Basics - Gets</title>
      <link>https://mordsith.github.io/2017/crystal-tutorial-the-basics---gets/</link>
      <pubDate>Tue, 31 Jan 2017 16:16:03 +0100</pubDate>
      
      <guid>https://mordsith.github.io/2017/crystal-tutorial-the-basics---gets/</guid>
      <description>

&lt;p&gt;In the last tutorial we output text and numbers, in this tutorial im going to talk about something called standard streams. There are three kinds of standard streams and there are called &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stdin - standard input&lt;/li&gt;
&lt;li&gt;stdout - standard output&lt;/li&gt;
&lt;li&gt;stderr - standard error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last time we used stdout, these where puts and print to output on screen in Crystal. This time im going to discuss stdin, meaning getting input from the user. Usually in Crystal lang this is done by the command gets. This is what a simple gets looks like&amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;          &lt;span style=&#34;color: #75715e&#34;&gt;# stores the input to x&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;            &lt;span style=&#34;color: #75715e&#34;&gt;# outputs x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;Crystal 123       # my input&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Crystal 123       # what crystal outputs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now this is a very simple way to do it compared to some other languages.. * coughs rust * . I know that you usually don&amp;rsquo;t use something like input in real world software but it is very important when learning in my opinion.&lt;/p&gt;

&lt;p&gt;To get a sertain amount of characters you can do this&amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color: #75715e&#34;&gt;# outputs the three first characters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;Samuel L Jackson  # what i put in&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Sam               # what gets took in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To stop taking in to the stdin when a specific character is put in you can ..&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color: #75715e&#34;&gt;# will stop after the char s in found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;today i had a sandwich for lunch # my input&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;today i had a s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You can also stop after a sertain amount of chars if you write &lt;strong&gt;puts gets(&amp;rsquo;s&amp;rsquo;, 10)&lt;/strong&gt;. To read before the delimiter is found ..&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;c++&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color: #75715e&#34;&gt;# will stop before the delimiter is found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;i do alot of c++ code&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;i do alot of&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Its easy to split up the gets. There is alot of information about this topic and more on &lt;strong&gt;&lt;a href=&#34;https://crystal-lang.org/api/0.19.2/index.html&#34;&gt;Crystal Lang Api&lt;/a&gt;&lt;/strong&gt; site. According to the site a not_nil! command is required that the compiler forces us to deal with. Like this &amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;The Earth is Round&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;[&amp;quot;The&amp;quot;, &amp;quot;Earth&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;Round&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And to split up to two variables.&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;11 22 33         # input&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;11 22            # output, notice it did not take in the last numbers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can also split with a perticular character.&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;           &lt;span style=&#34;color: #75715e&#34;&gt;# split when -&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;Linda-Samantha-Nick-Bjorn               # my input&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;[&amp;quot;Linda&amp;quot;, &amp;quot;Samantha&amp;quot;, &amp;quot;Nick&amp;quot;, &amp;quot;Bjorn&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And lastly if we want to add numbers we can do this one liner&amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;map(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to_i)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;120 21 43 66 22         # input&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;272&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And there is probably alot more you can do with gets. Got anything to add please let me know.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;                               &lt;span style=&#34;color: #75715e&#34;&gt;# stores the input to x&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                                &lt;span style=&#34;color: #75715e&#34;&gt;# stores the three first characters&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                              &lt;span style=&#34;color: #75715e&#34;&gt;# will stop after the char s in found&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;c++&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                        &lt;span style=&#34;color: #75715e&#34;&gt;# will stop before the delimiter is found&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;                    &lt;span style=&#34;color: #75715e&#34;&gt;# split up the input&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;x,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;             &lt;span style=&#34;color: #75715e&#34;&gt;# split up input to two variables&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;               &lt;span style=&#34;color: #75715e&#34;&gt;# split when -&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;not_nil!&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;map(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to_i)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sum&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;# split up to integers and sums&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crystal-lang.org/api/0.19.2/IO.html&#34;&gt;https://crystal-lang.org/api/0.19.2/IO.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Crystal Tutorial The Basics - Puts</title>
      <link>https://mordsith.github.io/2017/crystal-tutorial-the-basics---puts/</link>
      <pubDate>Sun, 29 Jan 2017 16:57:38 +0100</pubDate>
      
      <guid>https://mordsith.github.io/2017/crystal-tutorial-the-basics---puts/</guid>
      <description>

&lt;p&gt;I really like these new programming languages like Go and Rust. I found a relatively new language called Crystal. I am really amazed by its performance and how easy it is to use. Crystal has similar syntax as Ruby but compared to Ruby it is a compiled language and not interpreted, making it perform really well and leave a low memory footprint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crystal is Alpha stage at the moment.&lt;/li&gt;
&lt;li&gt;Crystal does not work on Windows, but it will sometime in 2017.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install Crystal you should take a look at the official documents called &lt;a href=&#34;https://crystal-lang.org/docs/installation/&#34;&gt;The Crystal Book!&lt;/a&gt; It is also a great way to learn more about the language.&lt;/p&gt;

&lt;p&gt;To create a Crystal project type &amp;hellip;&lt;/p&gt;

&lt;p&gt;Terminal:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal init app casual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;crystal&lt;/strong&gt; is the name of the compiler. The &lt;strong&gt;init&lt;/strong&gt; command creates the default project structure. The &lt;strong&gt;app&lt;/strong&gt; commands creates an app skeleton, to create a library change it to &lt;strong&gt;lib&lt;/strong&gt;. &lt;strong&gt;casual&lt;/strong&gt; is just the name i picked, you may change that to whatever you like. To run the app type &amp;hellip;&lt;/p&gt;

&lt;p&gt;Terminal:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ cd casual&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And nothing will happen since we haven&amp;rsquo;t put anything in the file.&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;casual.cr&lt;/strong&gt; file with your favorite editor located inside the src folder. Remove everything inside and type &amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Save the file and return to the terminal and run it!&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Hello, World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And congrats! You&amp;rsquo;r first Crystal application. Totally worthless but still pretty cool.&lt;/p&gt;

&lt;p&gt;To build the app type &amp;hellip;&lt;/p&gt;

&lt;p&gt;Terminal:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal build src/casual.cr --release&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;$ ./casual&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Hello, World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Lets have a look at the file we just created.&lt;/p&gt;

&lt;p&gt;Terminal:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ ls -shR casual&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;104K casual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;104 kilobytes! That is really amazing for such a new complex language.. specially if you compare it to other new languages. I got it down to 80kb&amp;rsquo;s with strip. Thats like C small! I am not sure how Crystal manages this but i will try to find out.&lt;/p&gt;

&lt;h2 id=&#34;back-to-programming&#34;&gt;Back to Programming&lt;/h2&gt;

&lt;p&gt;Here are some simple output commands. It is good to remember that&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;puts # adds a new line after the end.&lt;/li&gt;
&lt;li&gt;print # does not add a new line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;btw hashtag means that it is a comment.&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;                     &lt;span style=&#34;color: #75715e&#34;&gt;# simple output with new line&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;                     

&lt;span style=&#34;color: #f8f8f2&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt;                   &lt;span style=&#34;color: #75715e&#34;&gt;# without new line&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;World!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;                  &lt;span style=&#34;color: #75715e&#34;&gt;# \n = newline like in most C langs&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Sam&amp;quot;&lt;/span&gt;                   &lt;span style=&#34;color: #75715e&#34;&gt;# declaring a string variable&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;My name is: #{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_name&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;     &lt;span style=&#34;color: #75715e&#34;&gt;# output with a placeholder for the variable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Hello,&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;World!&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Hello, World!&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;My name is: Sam&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In my variable ( variables are placeholders ) i assigned a String with the value of Sam. Crystal being similar to Ruby figures out that it is a string. And then inside the hashtag curley brackets i can output the variable.&lt;/p&gt;

&lt;p&gt;Lets do some other fun stuff with strings..&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I Love Crystal&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_text has #{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;} characters&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# nr of chars&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;upcase&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;                      &lt;span style=&#34;color: #75715e&#34;&gt;# Uppercase&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;downcase&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;                    &lt;span style=&#34;color: #75715e&#34;&gt;# Lowercase&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sub(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;                &lt;span style=&#34;color: #75715e&#34;&gt;# substitutes o&amp;#39;s with i&amp;#39;s&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ends_with?(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Crystal&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;       &lt;span style=&#34;color: #75715e&#34;&gt;# True! It does.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;my_text has 14 characters&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;I LOVE CRYSTAL&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;i love crystal&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;I Live Crystal&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Something cool i found was the &amp;ldquo;Heredoc&amp;rdquo;. I had never heard of it before but seems really useful for writing large string, or if you have alot of symbols. Heredoc starts with &amp;lt;&amp;lt;- and the name you give it. Then the text has to be indented 4 line.&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# The text has to be indented 4 lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;SOMETHING&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    Hello to                    &lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    /&amp;quot;You People In&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    In The &amp;quot; &amp;quot; World?=)()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    &amp;quot;{&amp;#39;&amp;#39;¤%&amp;amp;¤{&amp;amp;/(%/&amp;amp;)}}&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    SOMETHING&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;Hello to                          &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;/&amp;quot;You People In&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;In The &amp;quot; &amp;quot; World?=)()&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;quot;{&amp;#39;&amp;#39;¤%&amp;amp;¤{&amp;amp;/(%/&amp;amp;)}}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And of course there is alot more you can do&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;mathematics&#34;&gt;Mathematics&lt;/h3&gt;

&lt;p&gt;Now for some simple math. Doing simple mathematics with crystal is really simple i think.&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;                &lt;span style=&#34;color: #75715e&#34;&gt;# add&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;               &lt;span style=&#34;color: #75715e&#34;&gt;# substract&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20.0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0&lt;/span&gt;           &lt;span style=&#34;color: #75715e&#34;&gt;# divide&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;13&lt;/span&gt;              &lt;span style=&#34;color: #75715e&#34;&gt;# multiply&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;231&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;             &lt;span style=&#34;color: #75715e&#34;&gt;# modulus&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;              &lt;span style=&#34;color: #75715e&#34;&gt;# less than&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;              &lt;span style=&#34;color: #75715e&#34;&gt;# more than&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;             &lt;span style=&#34;color: #75715e&#34;&gt;# more or equal&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;11.1 / 22.4 = #{&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;11.1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;22.4&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;10.0&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;923&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;11.1 / 22.4 = 0.4955357142857143&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now let&amp;rsquo;s convert Celcius to Fahrenheit. 0 degrees Celcius is 32 degrees Fahrenheit. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;) and add 32. So &amp;hellip;&lt;/p&gt;

&lt;p&gt;Code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;celsius&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;fahrenheit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1.8&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;celsius&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;32 degrees celsius is #{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fahrenheit&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;$ crystal src/casual.cr&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;32 degrees celsius is 89.6 degrees fahrenheit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And of course alot more complicated mathematics can be performed, and i&amp;rsquo;m not a mathematician, but you get the picture.&lt;/p&gt;

&lt;p&gt;We have created a Crystal project, Compiled it, outputted code and done some simple mathematics. I hope this will help you to learn a bit about The Crystal language and Puts. Crystal syntax as i said is based on Ruby where there&amp;rsquo;s tons of information. I am new to this language aswell and have never tried Ruby before, but it seems like a lang that makes developing a bit more simple.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crystal-lang.org/docs/&#34;&gt;https://crystal-lang.org/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/askn/crystal-by-example&#34;&gt;https://github.com/askn/crystal-by-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>